@use "variables" as *;

:host {
  @media(max-width: $responsive) {
    width: 100%;
  }
}

@mixin questions($mainColor, $secondaryColor) {
  .app-questions-container {
    color: $mainColor;
    height: 100%;

    .intro-container {
      h2 {
        font-size: 3rem;
        font-weight: 100;

        @for $i from 1 through 3 {
          span:nth-of-type(#{$i}) {
            animation: fade-in 0.8s calc(#{$i}*0.1s) forwards cubic-bezier(0.11, 0, 0.5, 0);
          }
        }

        strong {
          font-weight: 600;

          @for $i from 1 through 2 {
            span:nth-of-type(#{$i}) {
              animation: fade-in 0.8s calc(#{$i + 3}*0.1s) forwards cubic-bezier(0.11, 0, 0.5, 0);
            }
          }
        }
      }

      p {
        color: $secondaryColor;
        font-style: italic;

        @for $i from 1 through 6 {
          span:nth-of-type(#{$i}) {
            animation: fade-in 0.8s calc(#{$i + 5}*0.1s) forwards cubic-bezier(0.11, 0, 0.5, 0);
          }
        }
      }

      span {
        display: inline-block;
        opacity: 0;
        filter: blur(4px);
      }
    }

    .question-container {
      @extend .intro-container;

      display: flex;
      flex-direction: column;
      height: 100%;
      justify-content: space-between;

      h3 {
        @for $i from 1 through 100 {
          span:nth-of-type(#{$i}) {
            animation: fade-in 0.8s calc(#{$i}*0.1s) forwards cubic-bezier(0.11, 0, 0.5, 0);
          }
        }
      }
    }

    .result-container {

      span {
        display: inline-block;
        opacity: 0;
        filter: blur(4px);
      }

      h3 {
        font-size: 4rem;
        font-weight: 100;

        @for $i from 1 through 3 {
          span:nth-of-type(#{$i}) {
            animation: fade-in 0.8s calc(#{$i}*0.1s) forwards cubic-bezier(0.11, 0, 0.5, 0);
          }
        }

        strong {
          font-weight: 600;

          @for $i from 1 through 2 {
            span:nth-of-type(#{$i}) {
              animation: fade-in 0.8s calc(#{$i + 3}*0.1s) forwards cubic-bezier(0.11, 0, 0.5, 0);
            }
          }
        }
      }
    }
  }
}

@keyframes fade-in {
  100% {
    opacity: 1;
    filter: blur(0);
  }
}


:host-context(.light) {
  @include questions($darkNavy, $greyNavy);
}

:host-context(.dark) {
  @include questions($pureWhite, $lightBluish);
}
